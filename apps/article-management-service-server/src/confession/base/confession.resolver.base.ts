/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Confession } from "./Confession";
import { ConfessionCountArgs } from "./ConfessionCountArgs";
import { ConfessionFindManyArgs } from "./ConfessionFindManyArgs";
import { ConfessionFindUniqueArgs } from "./ConfessionFindUniqueArgs";
import { CreateConfessionArgs } from "./CreateConfessionArgs";
import { UpdateConfessionArgs } from "./UpdateConfessionArgs";
import { DeleteConfessionArgs } from "./DeleteConfessionArgs";
import { ConfessionService } from "../confession.service";
@graphql.Resolver(() => Confession)
export class ConfessionResolverBase {
  constructor(protected readonly service: ConfessionService) {}

  async _confessionsMeta(
    @graphql.Args() args: ConfessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Confession])
  async confessions(
    @graphql.Args() args: ConfessionFindManyArgs
  ): Promise<Confession[]> {
    return this.service.confessions(args);
  }

  @graphql.Query(() => Confession, { nullable: true })
  async confession(
    @graphql.Args() args: ConfessionFindUniqueArgs
  ): Promise<Confession | null> {
    const result = await this.service.confession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Confession)
  async createConfession(
    @graphql.Args() args: CreateConfessionArgs
  ): Promise<Confession> {
    return await this.service.createConfession({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Confession)
  async updateConfession(
    @graphql.Args() args: UpdateConfessionArgs
  ): Promise<Confession | null> {
    try {
      return await this.service.updateConfession({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Confession)
  async deleteConfession(
    @graphql.Args() args: DeleteConfessionArgs
  ): Promise<Confession | null> {
    try {
      return await this.service.deleteConfession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
